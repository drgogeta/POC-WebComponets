{"version":3,"file":"static/js/788.a2218274.chunk.js","mappings":"yJA4DMA,EA1DyB,SAACC,EAAcC,GAC1C,IAAIC,EAAY,IAAIC,IAChBC,EAAeJ,EACbK,EAAiB,SAACC,EAAQC,GACxBC,MAAMC,QAAQH,IACd,OAAIA,GAAQI,SAAQ,SAAAC,GAChBJ,EAASI,GAAaP,EAAaO,MAIvCJ,EAASD,GAAUM,OAAOC,OAAO,GAAIT,IAGvCU,EAAY,SAACP,EAAUQ,GAKzB,OAJKb,EAAUc,IAAIT,KACfL,EAAUe,IAAIV,EAAUQ,GACxBV,EAAeU,EAAUR,IAEtB,WACCL,EAAUc,IAAIT,IACdL,EAAUgB,OAAOX,KA+B7B,MAAO,CACHY,SA5Ba,SAAC,EAAWC,GAAa,IAAtBC,EAAsB,EAAtBA,MAGhB,OAFAjB,EAAeiB,EACfnB,EAAUQ,QAAQL,GACXe,GA0BPE,SAxBa,SAACC,EAAOH,GAGrB,OAAOnB,EAAea,EAAWM,EAAS,KAsB1CI,YApBgB,SAACC,EAAMC,GACvB,IAAMC,EAAgBF,EAAKG,UACrBC,EAAwBF,EAAcG,kBACtCC,EAA2BJ,EAAcK,qBAC/CL,EAAcG,kBAAoB,WAE9B,GADAhB,EAAUmB,KAAMP,GACZG,EACA,OAAOA,EAAsBK,KAAKD,OAG1CN,EAAcK,qBAAuB,WACjC9B,EAAUgB,OAAOe,MACbF,GACAA,EAAyBG,KAAKD,SAWzBE,CAAuB,CACxCC,YAAa,UACbC,SAAU,CACNC,SAAU,GACVC,MAAO,GACPC,IAAK,IAETC,YAAa,GACbC,KAAM,IACNC,kBAAmB,eACpB,SAAC7B,EAAW8B,GAAZ,OAAuBC,EAAAA,EAAAA,GAAE,mBAAoB,CAAE/B,UAAWA,EAAWgC,SAAUF,Q,8HC3D9EG,EAAQ,WACV,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBhB,KAAMe,GAFf,gDAIV,WACE,GAAIf,KAAKiB,SAAWjB,KAAKS,MAAQT,KAAKkB,IACpC,OAAOlB,KAAKiB,QAAQE,SAbVD,EAayBlB,KAAKkB,IAbzBT,EAa8BT,KAAKS,KAXjC,KAAjBS,EAAIE,OAAO,IAA6C,KAAhCX,EAAKW,OAAOX,EAAKY,OAAS,GAC7CZ,EAAKa,MAAM,EAAGb,EAAKY,OAAS,GAAKH,EAEnCT,EAAOS,IALD,IAACA,EAAKT,IAOT,cASV,WAAW,OAAOc,EAAAA,EAAAA,GAAWvB,UATnB,KAWZlC,EAAAA,EAAAA,YAAyBgD,EAAU,CACjC,UACA","sources":["../../app-1/dist/esm/active-router-d073ec9d.js","../../app-1/dist/esm/stencil-router-redirect.entry.js"],"sourcesContent":["import { h } from './index-83665fc4.js';\n\nconst createProviderConsumer = (defaultState, consumerRender) => {\r\n    let listeners = new Map();\r\n    let currentState = defaultState;\r\n    const updateListener = (fields, instance) => {\r\n        if (Array.isArray(fields)) {\r\n            [...fields].forEach(fieldName => {\r\n                instance[fieldName] = currentState[fieldName];\r\n            });\r\n        }\r\n        else {\r\n            instance[fields] = Object.assign({}, currentState);\r\n        }\r\n    };\r\n    const subscribe = (instance, propList) => {\r\n        if (!listeners.has(instance)) {\r\n            listeners.set(instance, propList);\r\n            updateListener(propList, instance);\r\n        }\r\n        return () => {\r\n            if (listeners.has(instance)) {\r\n                listeners.delete(instance);\r\n            }\r\n        };\r\n    };\r\n    const Provider = ({ state }, children) => {\r\n        currentState = state;\r\n        listeners.forEach(updateListener);\r\n        return children;\r\n    };\r\n    const Consumer = (props, children) => {\r\n        // The casting on subscribe is to allow for crossover through the stencil compiler\r\n        // In the future we should allow for generics in components.\r\n        return consumerRender(subscribe, children[0]);\r\n    };\r\n    const injectProps = (Cstr, fieldList) => {\r\n        const CstrPrototype = Cstr.prototype;\r\n        const cstrConnectedCallback = CstrPrototype.connectedCallback;\r\n        const cstrDisconnectedCallback = CstrPrototype.disconnectedCallback;\r\n        CstrPrototype.connectedCallback = function () {\r\n            subscribe(this, fieldList);\r\n            if (cstrConnectedCallback) {\r\n                return cstrConnectedCallback.call(this);\r\n            }\r\n        };\r\n        CstrPrototype.disconnectedCallback = function () {\r\n            listeners.delete(this);\r\n            if (cstrDisconnectedCallback) {\r\n                cstrDisconnectedCallback.call(this);\r\n            }\r\n        };\r\n    };\r\n    return {\r\n        Provider,\r\n        Consumer,\r\n        injectProps\r\n    };\r\n};\n\nconst ActiveRouter = createProviderConsumer({\r\n    historyType: 'browser',\r\n    location: {\r\n        pathname: '',\r\n        query: {},\r\n        key: ''\r\n    },\r\n    titleSuffix: '',\r\n    root: '/',\r\n    routeViewsUpdated: () => { }\r\n}, (subscribe, child) => (h(\"context-consumer\", { subscribe: subscribe, renderer: child })));\n\nexport { ActiveRouter as A };\n","import { r as registerInstance, g as getElement } from './index-83665fc4.js';\nimport { A as ActiveRouter } from './active-router-d073ec9d.js';\n\n// Get the URL for this route link without the root from the router\nconst getUrl = (url, root) => {\n  // Don't allow double slashes\n  if (url.charAt(0) == '/' && root.charAt(root.length - 1) == '/') {\n    return root.slice(0, root.length - 1) + url;\n  }\n  return root + url;\n};\nlet Redirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  componentWillLoad() {\n    if (this.history && this.root && this.url) {\n      return this.history.replace(getUrl(this.url, this.root));\n    }\n  }\n  get el() { return getElement(this); }\n};\nActiveRouter.injectProps(Redirect, [\n  'history',\n  'root'\n]);\n\nexport { Redirect as stencil_router_redirect };\n"],"names":["ActiveRouter","defaultState","consumerRender","listeners","Map","currentState","updateListener","fields","instance","Array","isArray","forEach","fieldName","Object","assign","subscribe","propList","has","set","delete","Provider","children","state","Consumer","props","injectProps","Cstr","fieldList","CstrPrototype","prototype","cstrConnectedCallback","connectedCallback","cstrDisconnectedCallback","disconnectedCallback","this","call","createProviderConsumer","historyType","location","pathname","query","key","titleSuffix","root","routeViewsUpdated","child","h","renderer","Redirect","hostRef","registerInstance","history","url","replace","charAt","length","slice","getElement"],"sourceRoot":""}