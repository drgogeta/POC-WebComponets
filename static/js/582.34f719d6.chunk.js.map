{"version":3,"file":"static/js/582.34f719d6.chunk.js","mappings":"yJA4DMA,EA1DyB,SAACC,EAAcC,GAC1C,IAAIC,EAAY,IAAIC,IAChBC,EAAeJ,EACbK,EAAiB,SAACC,EAAQC,GACxBC,MAAMC,QAAQH,IACd,OAAIA,GAAQI,SAAQ,SAAAC,GAChBJ,EAASI,GAAaP,EAAaO,MAIvCJ,EAASD,GAAUM,OAAOC,OAAO,GAAIT,IAGvCU,EAAY,SAACP,EAAUQ,GAKzB,OAJKb,EAAUc,IAAIT,KACfL,EAAUe,IAAIV,EAAUQ,GACxBV,EAAeU,EAAUR,IAEtB,WACCL,EAAUc,IAAIT,IACdL,EAAUgB,OAAOX,KA+B7B,MAAO,CACHY,SA5Ba,SAAC,EAAWC,GAAa,IAAtBC,EAAsB,EAAtBA,MAGhB,OAFAjB,EAAeiB,EACfnB,EAAUQ,QAAQL,GACXe,GA0BPE,SAxBa,SAACC,EAAOH,GAGrB,OAAOnB,EAAea,EAAWM,EAAS,KAsB1CI,YApBgB,SAACC,EAAMC,GACvB,IAAMC,EAAgBF,EAAKG,UACrBC,EAAwBF,EAAcG,kBACtCC,EAA2BJ,EAAcK,qBAC/CL,EAAcG,kBAAoB,WAE9B,GADAhB,EAAUmB,KAAMP,GACZG,EACA,OAAOA,EAAsBK,KAAKD,OAG1CN,EAAcK,qBAAuB,WACjC9B,EAAUgB,OAAOe,MACbF,GACAA,EAAyBG,KAAKD,SAWzBE,CAAuB,CACxCC,YAAa,UACbC,SAAU,CACNC,SAAU,GACVC,MAAO,GACPC,IAAK,IAETC,YAAa,GACbC,KAAM,IACNC,kBAAmB,eACpB,SAAC7B,EAAW8B,GAAZ,OAAuBC,EAAAA,EAAAA,GAAE,mBAAoB,CAAE/B,UAAWA,EAAWgC,SAAUF,Q,4HCnE9EG,EAAmB,WACrB,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBhB,KAAMe,GACvBf,KAAKiB,MAAO,EACZjB,KAAKkB,QAAU,GAJI,qCAMrB,SAAOA,GACDlB,KAAKmB,SACPnB,KAAKmB,UAEHnB,KAAKoB,UACPpB,KAAKmB,QAAUnB,KAAKoB,QAAQC,MAAMH,MAXjB,qBAcrB,WACMlB,KAAKmB,UACPnB,KAAKmB,UACLnB,KAAKmB,aAAUG,KAjBE,+BAoBrB,WACMtB,KAAKiB,MACPjB,KAAKuB,OAAOvB,KAAKkB,WAtBA,2BAyBrB,SAAcM,EAAYC,GACpBzB,KAAKiB,KACFjB,KAAKiB,MAAQQ,IAAgBD,GAChCxB,KAAKuB,OAAOvB,KAAKkB,SAInBlB,KAAK0B,YAhCY,gCAmCrB,WACE1B,KAAK0B,YApCc,oBAsCrB,WACE,OAAO,OAvCY,cAyCrB,WAAW,OAAOC,EAAAA,EAAAA,GAAW3B,SAzCR,qBA0CrB,WAAwB,MAAO,CAC7B,QAAW,CAAC,iBACZ,KAAQ,CAAC,sBA5CU,KA+CvBlC,EAAAA,EAAAA,YAAyBgD,EAAqB,CAC5C","sources":["../../app-1/dist/esm/active-router-d073ec9d.js","../../app-1/dist/esm/stencil-router-prompt.entry.js"],"sourcesContent":["import { h } from './index-83665fc4.js';\n\nconst createProviderConsumer = (defaultState, consumerRender) => {\r\n    let listeners = new Map();\r\n    let currentState = defaultState;\r\n    const updateListener = (fields, instance) => {\r\n        if (Array.isArray(fields)) {\r\n            [...fields].forEach(fieldName => {\r\n                instance[fieldName] = currentState[fieldName];\r\n            });\r\n        }\r\n        else {\r\n            instance[fields] = Object.assign({}, currentState);\r\n        }\r\n    };\r\n    const subscribe = (instance, propList) => {\r\n        if (!listeners.has(instance)) {\r\n            listeners.set(instance, propList);\r\n            updateListener(propList, instance);\r\n        }\r\n        return () => {\r\n            if (listeners.has(instance)) {\r\n                listeners.delete(instance);\r\n            }\r\n        };\r\n    };\r\n    const Provider = ({ state }, children) => {\r\n        currentState = state;\r\n        listeners.forEach(updateListener);\r\n        return children;\r\n    };\r\n    const Consumer = (props, children) => {\r\n        // The casting on subscribe is to allow for crossover through the stencil compiler\r\n        // In the future we should allow for generics in components.\r\n        return consumerRender(subscribe, children[0]);\r\n    };\r\n    const injectProps = (Cstr, fieldList) => {\r\n        const CstrPrototype = Cstr.prototype;\r\n        const cstrConnectedCallback = CstrPrototype.connectedCallback;\r\n        const cstrDisconnectedCallback = CstrPrototype.disconnectedCallback;\r\n        CstrPrototype.connectedCallback = function () {\r\n            subscribe(this, fieldList);\r\n            if (cstrConnectedCallback) {\r\n                return cstrConnectedCallback.call(this);\r\n            }\r\n        };\r\n        CstrPrototype.disconnectedCallback = function () {\r\n            listeners.delete(this);\r\n            if (cstrDisconnectedCallback) {\r\n                cstrDisconnectedCallback.call(this);\r\n            }\r\n        };\r\n    };\r\n    return {\r\n        Provider,\r\n        Consumer,\r\n        injectProps\r\n    };\r\n};\n\nconst ActiveRouter = createProviderConsumer({\r\n    historyType: 'browser',\r\n    location: {\r\n        pathname: '',\r\n        query: {},\r\n        key: ''\r\n    },\r\n    titleSuffix: '',\r\n    root: '/',\r\n    routeViewsUpdated: () => { }\r\n}, (subscribe, child) => (h(\"context-consumer\", { subscribe: subscribe, renderer: child })));\n\nexport { ActiveRouter as A };\n","import { r as registerInstance, g as getElement } from './index-83665fc4.js';\nimport { A as ActiveRouter } from './active-router-d073ec9d.js';\n\nlet StencilRouterPrompt = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.when = true;\n    this.message = '';\n  }\n  enable(message) {\n    if (this.unblock) {\n      this.unblock();\n    }\n    if (this.history) {\n      this.unblock = this.history.block(message);\n    }\n  }\n  disable() {\n    if (this.unblock) {\n      this.unblock();\n      this.unblock = undefined;\n    }\n  }\n  componentWillLoad() {\n    if (this.when) {\n      this.enable(this.message);\n    }\n  }\n  updateMessage(newMessage, prevMessage) {\n    if (this.when) {\n      if (!this.when || prevMessage !== newMessage) {\n        this.enable(this.message);\n      }\n    }\n    else {\n      this.disable();\n    }\n  }\n  componentDidUnload() {\n    this.disable();\n  }\n  render() {\n    return null;\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"message\": [\"updateMessage\"],\n    \"when\": [\"updateMessage\"]\n  }; }\n};\nActiveRouter.injectProps(StencilRouterPrompt, [\n  'history',\n]);\n\nexport { StencilRouterPrompt as stencil_router_prompt };\n"],"names":["ActiveRouter","defaultState","consumerRender","listeners","Map","currentState","updateListener","fields","instance","Array","isArray","forEach","fieldName","Object","assign","subscribe","propList","has","set","delete","Provider","children","state","Consumer","props","injectProps","Cstr","fieldList","CstrPrototype","prototype","cstrConnectedCallback","connectedCallback","cstrDisconnectedCallback","disconnectedCallback","this","call","createProviderConsumer","historyType","location","pathname","query","key","titleSuffix","root","routeViewsUpdated","child","h","renderer","StencilRouterPrompt","hostRef","registerInstance","when","message","unblock","history","block","undefined","enable","newMessage","prevMessage","disable","getElement"],"sourceRoot":""}